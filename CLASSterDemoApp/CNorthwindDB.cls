VERSION 1.0 CLASS
BEGIN
  MultiUse = -1  'True
  Persistable = 0  'NotPersistable
  DataBindingBehavior = 0  'vbNone
  DataSourceBehavior  = 0  'vbNone
  MTSTransactionMode  = 0  'NotAnMTSObject
END
Attribute VB_Name = "CNorthwindDB"
Attribute VB_GlobalNameSpace = False
Attribute VB_Creatable = False
Attribute VB_PredeclaredId = False
Attribute VB_Exposed = False
'This database class was generated by CLASSter(tm)
'from Urfin Jus (www.urfinjus.net). Copyright 2000-2002, All rights reserved.
'   CLASSter Version: Version 2.0 (2.0.130), Full Edition
'   Date: 16 Apr 2002, 09:43
'   Connection string used:
'     "???"
'   Dependencies: MS ADO Library; MS ADO Recordset Library
'                 HuntERR31.Bas, ctrXMLUtils.Bas
'
'Public Class Members
'=============================================================================
'
' Methods for calling individual stored procedures
'Public Function ExecCustOrderHist(ByVal strCustomerID As String)  As Boolean
'Public Function ExecCustOrdersDetail(ByVal lngOrderID As Long)  As Boolean
'Public Function ExecCustOrdersOrders(ByVal strCustomerID As String)  As Boolean
'Public Function ExecEmployeeSalesbyCountry(ByVal datBeginningDate As Date, _
'         ByVal datEndingDate As Date)  As Boolean
'Public Function ExecSalesbyYear(ByVal datBeginningDate As Date, _
'         ByVal datEndingDate As Date)  As Boolean
'Public Function ExecSalesByCategory(ByVal strCategoryName As String, _
'         ByVal strOrdYear As String)  As Boolean
'Public Function ExecTenMostExpensiveProducts()  As Boolean
'
' Execute SQLs
'Public Function AddSQLParam(Optional ByVal PValue As Variant, _
'                     Optional ByVal PName As String, _
'                     Optional ByVal PDir As ADODB.ParameterDirectionEnum = adParamInput, _
'                     Optional ByVal PType As ADODB.DataTypeEnum = adInteger, _
'                     Optional ByVal PSize As Long = 0, _
'                     Optional ByVal ZeroAsNull As Boolean = False) As Boolean
'Public Function ExecSQL(ByVal SQL As String, Optional ByVal Values) As Boolean
'
' Execute stored procedure by name
'Public Function ExecSPbyName(ByVal SPName As String, Optional ByVal ParamDefs As String, _
'                          Optional ByVal arrValues) As Boolean
'
' Options
'Public Property Get Options(ByVal mask As ENUM_CTR_OPTIONS) As Boolean
'Public Property Let Options(ByVal mask As ENUM_CTR_OPTIONS, ByVal Value As Boolean)
'
' ADO objects/properties
'Public Property Get ConnectionString() As String
'Public Property Let ConnectionString(ByVal AValue As String)
'Public Property Get Connected() As Boolean
'Public Sub Connect()
'Public Sub Disconnect()
'Public Property Get Connection() As ADODB.Connection
'Public Property Set Connection(ByVal AConnection As ADODB.Connection)
'Public Property Get Command() As ADODB.Command
'Public Property Get Recordset() As ADODB.Recordset
'Public Sub DisconnectRecordset()
'Public Sub ReleaseConnection()
'Public Sub ReleaseADO()
'Public Sub SetADOSettings(Optional ByVal ACursorLocation, _
'                          Optional ByVal ACursorType, _
'                          Optional ByVal ALockType, _
'                          Optional ByVal AConnectionTimeout, _
'                          Optional ByVal ACommandTimeout, _
'                          Optional ByVal AnADOExecOptions)
'Public Property Get Value(ByVal FieldName As String) As Variant
'Public Property Get ValueIsNull(ByVal FieldName As String) As Boolean
'Public Function TestConnection(ByVal AConnectstring As String, ByRef ErrDescr As String) As Boolean
'Public Property Get ADOVersion() As String
'
'Multiple recordsets
'Public Function SelectNextRecordset() As Boolean
'Public Function SkipClosedRecordsets() As Boolean
'
' Parameters
'Public Property Get ParamValue(ByVal ParamName As String) As Variant
'Public Function ParamIsNull(ByVal ParamName As String) As Boolean
'Public Property Get ReturnValue() As Long
'
' Formatting Recordset Fields
'Public Property Get ValueFmt(ByVal FieldName As String) As String
'Public Property Get FormatOf(ByVal FieldOrType) As String
'Public Sub FormatsClear()
'Public Sub FormatSet(ByVal AFormat As String, ParamArray FieldsOrTypes())
'
' Error Properties
'Public Property Get ErrorNumber() As Long
'Public Property Get ErrorSource() As String
'Public Property Get ErrorDescription() As String
'Public Property Get ErrorOccured() As Boolean
'Public Sub ErrorClear()
'
' Transactions
'Public Function BeginTransaction() As Boolean
'Public Function SetComplete() As Boolean
'Public Function SetAbort() As Boolean
'
' Recordset Navigation
'Public Function MoveFirst() As Boolean
'Public Function MoveLast() As Boolean
'Public Function MoveNext() As Boolean
'Public Function MovePrevious() As Boolean
'Public Property Get EOF() As Boolean
'Public Property Get BOF() As Boolean
'Public Property Get HasRecords() As Boolean
'Public Property Get RecordCount() As Long
'
'Batch methods
'Public Function BatchBegin() As Boolean
'Public Function BatchExec() As Boolean
'Public Function BatchCancel() As Boolean
'Public Function BatchDeclareVar(ByVal VarName As String, _
'                        ByVal VarType As String, _
'                        Optional ByVal UseForParams As String, _
'                        Optional ByVal InitialValue As String) As Boolean
'Public Property Get BatchActive() As Boolean
'Public Property Get BatchText() As String
'
' XML
'Public Function xmlGetRecordset() As String
'Public Function xmlGetData(Optional ByVal RsDataElem As String = "Recordset", _
'                            Optional ByVal ZRowElem As String = "Record", _
'                            Optional ByVal ClosingTag As String) As String
'Public Function xmlGetDataAll(Optional ByVal RootElem As String = "Data", _
'                              Optional ByVal RsDataElems As String = "Recordset", _
'                              Optional ByVal ZRowElems As String = "Record", _
'                              Optional ByVal ClosingTag As String) As String
'Public Function xmlGetDataAdv(ByVal RsDataElem As String, _
'                            ByVal ZRowSpecs As String, _
'                            Optional ByVal SkipRecords As Long = 0, _
'                            Optional ByVal IncludeMaxRecords As Long = -1, _
'                            Optional ByVal ClosingTag As String) As String
'
'
Option Explicit
Option Base 0
'
'Errors raised by database class code
Public Enum ENUM_ERRDB
    ERRCTR_BATCH_NOT_ACTIVE = ERRMAP_RESERVED_FIRST + 2
    ERRCTR_BATCH_PRMDUPLICATE
    ERRCTR_NO_CONNECTION_STRING
    ERRCTR_REGISTRY_FAILED
    ERRCTR_INVALID_PARAM_COUNT
    ERRCTR_INVALID_PARAMDEF
    ERRCTR_TYPE_NOT_SUPPORTED
    ERRCTR_SP_RETURNED_NON_ZERO
    ERRCTR_STRING_TOO_LONG
    ERRCTR_INVALID_NODESPEC
End Enum
'
Public Enum ENUM_CTR_OPTIONS 'Option flags, used as Options Property parameter
    CTRO_ERR_RAISE = &H1            'Raise error in public methods
    CTRO_ERR_SETABORT = &H2         'Abort transaction on error
    CTRO_ERR_DISABLECOMMIT = &H4    'Call GetObjectContext.DisableCommit on error
    CTRO_STRLEN_RAISE = &H10        'Raise error if parameter string is too long
    CTRO_STRLEN_TRIM = &H20         'Trim parameter string if too long
    CTRO_NULL_EMPTYSTR = &H40       'Substitute empty strings with Nulls
    CTRO_NULL_ZERODATE = &H80       'Substitute 0 dates with Nulls
    CTRO_AUTO_CONNCLOSE = &H100     'Auto close connection
    CTRO_AUTO_CONNRELEASE = &H200   'Auto release connection
    CTRO_AUTO_DISCONNECT_RSET = &H400 'Auto disconnect recordset
    CTRO_AUTO_SKIPCLOSED = &H800    'Automatically skip closed recordsets
    CTRO_AUTO_CHKRETVAL = &H1000    'Raise error if sp returned non-zero value (MS SQL, Sybase)
End Enum
'
'Set of private flags, used internally by database class
Private Enum CTRO_PRIVATE
    CTRO_IN_BATCH = &H1000000     'Set if Batch mode is On
    CTRO_IN_ADOTRANS = &H2000000  'Set if ADO transaction is in progress
    CTRO_IN_PARAMSQL = &H4000000  'Set if building parameterized SQL
    CTRO_SELFCONNECT = &H8000000  'Set if connection was opened by class itself
    CTRO_INITIALIZED = &H80000000 'Set if Initialize method was called
End Enum
Const DEFAULT_OPTIONS = _
    CTRO_ERR_RAISE + CTRO_STRLEN_TRIM + CTRO_NULL_EMPTYSTR + CTRO_NULL_ZERODATE + CTRO_AUTO_SKIPCLOSED + _
     CTRO_AUTO_CHKRETVAL
Const DEFAULT_ADOEXEC_OPTIONS = 0
Const ZERO_AS_NULL = True
Private mOptions As Long
'
'ADO objects
Private mConnection As ADODB.Connection
Private mCommand As ADODB.Command
Private mRecordset As ADODB.Recordset
Private mConnectionString As String
Private mFormats As Collection
'
'ADO Settings
Private mCursorType As Long, mLockType As Long, mCursorLocation As Long
Private mConnectionTimeout As Long, mCommandTimeout As Long, mADOExecOptions As Long
Public RecordsetMaxRecords As Long
Public ProcGroup As Long
'
Const RETURN_VALUE = "RETURN_VALUE" 'Standard return value parameter name
Const EA_PUBLIC = EA_NORERAISE 'Actions for HuntERR.ErrorIn in public methods
Const STR_DEFAULT_CONNECTION = _
    "???"
Const STR_ERROR_FILE = "Errors.txt"
'
'Error properties
Private mErrorNumber As Long, mErrorSource As String, mErrorDescription As String
'
'Batch mode support variables
Private mBatchDecls As String, mBatchText As String, mBatchVars As Collection
'
'
' Methods for calling individual stored procedures
' ============================================================================
Public Function ExecCustOrderHist(ByVal strCustomerID As String) As Boolean
    On Error GoTo errHandler
    InitCommand
    AddParam RETURN_VALUE, adInteger, adParamReturnValue
    AddParam "@CustomerID", adVarWChar, adParamInput, 5, strCustomerID
    Execute "[CustOrderHist]"
    ExecCustOrderHist = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.ExecCustOrderHist(strCustomerID)", Array(strCustomerID), EA_PUBLIC
    HandleError
End Function

Public Function ExecCustOrdersDetail(ByVal lngOrderID As Long) As Boolean
    On Error GoTo errHandler
    InitCommand
    AddParam RETURN_VALUE, adInteger, adParamReturnValue
    AddParam "@OrderID", adInteger, adParamInput, , lngOrderID
    Execute "[CustOrdersDetail]"
    ExecCustOrdersDetail = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.ExecCustOrdersDetail(lngOrderID)", Array(lngOrderID), EA_PUBLIC
    HandleError
End Function

Public Function ExecCustOrdersOrders(ByVal strCustomerID As String) As Boolean
    On Error GoTo errHandler
    InitCommand
    AddParam RETURN_VALUE, adInteger, adParamReturnValue
    AddParam "@CustomerID", adVarWChar, adParamInput, 5, strCustomerID
    Execute "[CustOrdersOrders]"
    ExecCustOrdersOrders = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.ExecCustOrdersOrders(strCustomerID)", Array(strCustomerID), EA_PUBLIC
    HandleError
End Function

Public Function ExecEmployeeSalesbyCountry(ByVal datBeginningDate As Date, _
         ByVal datEndingDate As Date) As Boolean
    On Error GoTo errHandler
    InitCommand
    AddParam RETURN_VALUE, adInteger, adParamReturnValue
    AddParam "@Beginning_Date", adDBTimeStamp, adParamInput, , datBeginningDate
    AddParam "@Ending_Date", adDBTimeStamp, adParamInput, , datEndingDate
    Execute "[Employee Sales by Country]"
    ExecEmployeeSalesbyCountry = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.ExecEmployeeSalesbyCountry(datBeginningDate,datEndingDate)", _
         Array(datBeginningDate, datEndingDate), EA_PUBLIC
    HandleError
End Function

Public Function ExecSalesbyYear(ByVal datBeginningDate As Date, _
         ByVal datEndingDate As Date) As Boolean
    On Error GoTo errHandler
    InitCommand
    AddParam RETURN_VALUE, adInteger, adParamReturnValue
    AddParam "@Beginning_Date", adDBTimeStamp, adParamInput, , datBeginningDate
    AddParam "@Ending_Date", adDBTimeStamp, adParamInput, , datEndingDate
    Execute "[Sales by Year]"
    ExecSalesbyYear = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.ExecSalesbyYear(datBeginningDate,datEndingDate)", Array(datBeginningDate, _
         datEndingDate), EA_PUBLIC
    HandleError
End Function

Public Function ExecSalesByCategory(ByVal strCategoryName As String, _
         ByVal strOrdYear As String) As Boolean
    On Error GoTo errHandler
    InitCommand
    AddParam RETURN_VALUE, adInteger, adParamReturnValue
    AddParam "@CategoryName", adVarWChar, adParamInput, 15, strCategoryName
    AddParam "@OrdYear", adVarWChar, adParamInput, 4, strOrdYear
    Execute "[SalesByCategory]"
    ExecSalesByCategory = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.ExecSalesByCategory(strCategoryName,strOrdYear)", Array(strCategoryName, _
         strOrdYear), EA_PUBLIC
    HandleError
End Function

Public Function ExecTenMostExpensiveProducts() As Boolean
    On Error GoTo errHandler
    InitCommand
    AddParam RETURN_VALUE, adInteger, adParamReturnValue
    Execute "[Ten Most Expensive Products]"
    ExecTenMostExpensiveProducts = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.ExecTenMostExpensiveProducts", , EA_PUBLIC
    HandleError
End Function

'
' Execute SQLs
Public Function AddSQLParam(Optional ByVal PValue As Variant, _
                     Optional ByVal PName As String, _
                     Optional ByVal PDir As ADODB.ParameterDirectionEnum = adParamInput, _
                     Optional ByVal PType As ADODB.DataTypeEnum = adInteger, _
                     Optional ByVal PSize As Long = 0, _
                     Optional ByVal ZeroAsNull As Boolean = False) As Boolean
    On Error GoTo errHandler
    If Not Options(CTRO_IN_PARAMSQL) Then InitCommand
    Options(CTRO_IN_PARAMSQL) = True
    AddParam PName, PType, PDir, PSize, PValue, ZeroAsNull
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.AddSQLParam(PValue,PName,PDir,PType,PSize,ZeroAsNull)", _
         Array(PValue, PName, PDir, PType, PSize, ZeroAsNull), EA_PUBLIC
    HandleError
End Function

Public Function ExecSQL(ByVal SQL As String, Optional ByVal Values) As Boolean
    On Error GoTo errHandler
    If Not IsMissing(Values) Then SQL = SQLInsertValues(SQL, Values)
    If Not Options(CTRO_IN_PARAMSQL) Then InitCommand
    Execute SQL, adCmdText
    Options(CTRO_IN_PARAMSQL) = False
    ExecSQL = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.ExecSQL(SQL,Values)", Array(SQL, Values), EA_PUBLIC
    HandleError
End Function

Private Function SQLInsertValues(ByVal IntoStr As String, ByVal Values) As String
    On Error GoTo errHandler
    Dim i As Long, ChrX As String
    ChrX = Chr$(vbKeyBack) 'Special char to act instead of % during manipulations
    IntoStr = Replace(IntoStr, "%", ChrX)
    If Not IsArray(Values) Then Values = Array(Values)
    For i = LBound(Values) To UBound(Values)
        IntoStr = Replace(IntoStr, ChrX & (i + 1), Replace(Values(i), "'", "''"))
    Next i
    SQLInsertValues = Replace(IntoStr, ChrX, "%") 'replace back
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.SQLInsertValues(IntoStr,Values)", Array(IntoStr, Values)
End Function

'
' Execute stored procedure by name
' ParamDefs string constants are generated by CLASSter in separate *.Bas module.
'   Examples:  DBClass.ExecSP SP_CUSTORDERSDETAIL, PRM_CUSTORDERSDETAIL, OrderID
'              DBClass.ExecSP SP_GETORDERS, PRM_GETORDERS, Array(FromDate, ToDate)
Public Function ExecSPbyName(ByVal SPName As String, Optional ByVal ParamDefs As String, _
                          Optional ByVal arrValues) As Boolean
    On Error GoTo errHandler
    InitCommand
    If Not IsMissing(arrValues) Then RebuildParamsFromDefs ParamDefs, arrValues
    Execute SPName, adCmdStoredProc
    ExecSPbyName = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.ExecSPByName(SPName,ParamDefs,ArrValues)", _
        Array(SPName, ParamDefs, arrValues), EA_PUBLIC, mConnection
    HandleError
End Function

Private Sub RebuildParamsFromDefs(ByVal ParamDefs As String, ByVal arrValues)
    Dim arrDefs() As String, arrPrm() As String, i As Long
    Dim V, NumDefs As Long, NumVals As Long
    On Error GoTo errHandler
    If Not IsArray(arrValues) Then arrValues = Array(arrValues)
    arrDefs = Split(ParamDefs, ";")
    NumDefs = UBound(arrDefs) + 1
    NumVals = UBound(arrValues) + 1
    Check NumDefs = NumVals, ERRCTR_INVALID_PARAM_COUNT, _
        "Number of parameters values is inconsistent with Params Definition String. In def. string: " _
            & NumDefs & "; Provided in values array: " & NumVals
    AddParam RETURN_VALUE, ADODB.adInteger, ADODB.adParamReturnValue
    For i = 0 To NumDefs - 1
        arrPrm = Split(arrDefs(i), ",")
        Check UBound(arrPrm) = 4, ERRCTR_INVALID_PARAMDEF, _
            "Invalid parameter definition for parameter #" & (i + 1) & ": " & arrDefs(i)
        AddParam arrPrm(0), arrPrm(1), arrPrm(2), arrPrm(3), arrValues(i), (arrPrm(4) = "1")
    Next i
    Exit Sub
errHandler:
   ErrorIn "CNorthwindDB.RebuildParamsFromDefs", arrValues
End Sub

'
' Options
Public Property Get Options(ByVal mask As ENUM_CTR_OPTIONS) As Boolean
    If mOptions = 0 Then Initialize
    Options = ((mOptions And mask) <> 0)
End Property

Public Property Let Options(ByVal mask As ENUM_CTR_OPTIONS, ByVal Value As Boolean)
    If mOptions = 0 Then Initialize
    If Value Then mOptions = mOptions Or mask Else mOptions = mOptions And Not mask
End Property

'
' ADO objects/properties
Public Property Get ConnectionString() As String
    If mOptions = 0 Then Initialize
    If mConnectionString = "" Then
        ConnectionString = STR_DEFAULT_CONNECTION
        Else
        ConnectionString = mConnectionString
    End If
End Property

Public Property Let ConnectionString(ByVal AValue As String)
    If mOptions = 0 Then Initialize
    ReleaseConnection
    mConnectionString = AValue
End Property

Public Property Get Connected() As Boolean
    On Error Resume Next
    Connected = (mConnection.State = adStateOpen)
End Property

Public Sub Connect()
    On Error GoTo errHandler
    OpenConnection
    Exit Sub
errHandler:
    ErrorIn "CNorthwindDB.Connect"
    HandleError
End Sub

Private Sub OpenConnection()
    On Error GoTo errHandler
    If mOptions = 0 Then Initialize
    If Connected Then Exit Sub
    If mConnection Is Nothing Then
        Set mConnection = New ADODB.Connection
        With mConnection
            .CursorLocation = mCursorLocation
            .ConnectionTimeout = mConnectionTimeout
        End With
    End If
    If mConnection.State = adStateOpen Then
        Options(CTRO_SELFCONNECT) = False
        Else
        Check Len(ConnectionString) > 0, ERRCTR_NO_CONNECTION_STRING, "Connection information is not provided."
        mConnection.Open ConnectionString
        Options(CTRO_SELFCONNECT) = True
    End If
    If Not mCommand Is Nothing Then Set mCommand.ActiveConnection = mConnection
    Exit Sub
errHandler:
    ErrorIn "CNorthwindDB.OpenConnection", , , mConnection
End Sub

Public Sub Disconnect()
    On Error Resume Next
    mConnection.Close
    Options(CTRO_SELFCONNECT) = False
End Sub

Public Property Get Connection() As ADODB.Connection
    Set Connection = mConnection
End Property

Public Property Set Connection(ByVal AConnection As ADODB.Connection)
    Set mConnection = AConnection
End Property

Public Property Get Command() As ADODB.Command
    Set Command = mCommand
End Property

Public Property Get Recordset() As ADODB.Recordset
    Set Recordset = mRecordset
End Property

Public Sub DisconnectRecordset()
    If Not mRecordset Is Nothing Then Set mRecordset.ActiveConnection = Nothing
End Sub

Public Sub ReleaseConnection()
    On Error Resume Next
    If Options(CTRO_SELFCONNECT) Then Disconnect
    Set mRecordset.ActiveConnection = Nothing
    Set mCommand.ActiveConnection = Nothing
    Set mConnection = Nothing
End Sub

Public Sub ReleaseADO()
    On Error Resume Next
    ReleaseConnection
    Set mCommand = Nothing
    Set mRecordset = Nothing
End Sub

Public Sub SetADOSettings(Optional ByVal ACursorLocation, _
                          Optional ByVal ACursorType, _
                          Optional ByVal ALockType, _
                          Optional ByVal AConnectionTimeout, _
                          Optional ByVal ACommandTimeout, _
                          Optional ByVal AnADOExecOptions)
    On Error GoTo errHandler
    If Not IsMissing(ACursorLocation) Then mCursorLocation = ACursorLocation
    If Not IsMissing(ACursorType) Then mCursorType = ACursorType
    If Not IsMissing(ALockType) Then mLockType = ALockType
    If Not IsMissing(AConnectionTimeout) Then mConnectionTimeout = AConnectionTimeout
    If Not IsMissing(ACommandTimeout) Then mCommandTimeout = ACommandTimeout
    If Not IsMissing(AnADOExecOptions) Then mADOExecOptions = AnADOExecOptions
    Exit Sub
errHandler:
    ErrorIn "CNorthwindDB.SetADOSettings(ACursorLocation,ACursorType,ALockType,AConnectionTimeout," & _
        "ACommandTimeout,AnADOExecOptions)", Array(ACursorLocation, ACursorType, ALockType, AConnectionTimeout, _
         ACommandTimeout, AnADOExecOptions), EA_PUBLIC
    HandleError
End Sub

Public Property Get Value(ByVal FieldName As String) As Variant
    Dim F As ADODB.Field
    On Error GoTo errHandler
    Set F = Recordset.Fields(FieldName)
    If Not IsNull(F.Value) Then Value = F.Value     'If field value is Null Value returns Empty
    Exit Property
errHandler:
    ErrorIn "CNorthwindDB.Value(AFieldName)", FieldName, EA_PUBLIC
    HandleError
End Property

Public Property Get ValueIsNull(ByVal FieldName As String) As Boolean
    On Error GoTo errHandler
    Dim F As ADODB.Field
    Set F = Recordset.Fields(FieldName)
    ValueIsNull = IsNull(F.Value)
    Exit Property
errHandler:
    ErrorIn "CNorthwindDB.ValueIsNull(FieldName)", FieldName, EA_PUBLIC
    HandleError
End Property

Public Function TestConnection(ByVal AConnectstring As String, ByRef ErrDescr As String) As Boolean
    Dim Conn As ADODB.Connection
    On Error GoTo ErrorHandler
    Set Conn = New ADODB.Connection
    Conn.Open AConnectstring
    TestConnection = True
    Exit Function
ErrorHandler:
    ErrDescr = Err.Description
End Function

Public Property Get ADOVersion() As String
    On Error Resume Next
    Dim Conn As Object
    Set Conn = CreateObject("ADODB.Connection")
    ADOVersion = Conn.Version
End Property

'Private methods
Private Sub InitCommand()
    On Error GoTo errHandler
    If mOptions = 0 Then Initialize
    Set mCommand = New ADODB.Command
    mCommand.CommandTimeout = mCommandTimeout
    Exit Sub
errHandler:
    ErrorIn "CNorthwindDB.InitCommand"
End Sub

Private Sub Execute(ByVal CommandText As String, _
                    Optional ByVal CommandType As Long = ADODB.adCmdStoredProc)
    On Error GoTo errHandler
    Dim RetVal As Long
    If BatchActive Then BatchTranslateCommand CommandText, CommandType: Exit Sub
    If Not Connected Then OpenConnection
    With mCommand
        If CommandType = adCmdStoredProc And ProcGroup > 0 Then CommandText = CommandText & ";" & ProcGroup
        .CommandText = CommandText
        .CommandType = CommandType
        Set .ActiveConnection = mConnection
    End With
    Set mRecordset = New ADODB.Recordset
    With mRecordset
        .CursorLocation = mCursorLocation
        If RecordsetMaxRecords > 0 Then .MaxRecords = RecordsetMaxRecords
        .Open mCommand, , mCursorType, mLockType, mADOExecOptions
    End With
    If CommandType = adCmdStoredProc And Options(CTRO_AUTO_CHKRETVAL) Then
        RetVal = PrmValue(RETURN_VALUE)
        Check RetVal = 0, ERRCTR_SP_RETURNED_NON_ZERO, _
            "Stored procedure returned non-zero value: " & RetVal
    End If
    If Options(CTRO_AUTO_SKIPCLOSED) Then SkipClosedRecordsets
    If Options(CTRO_AUTO_DISCONNECT_RSET) Then DisconnectRecordset
    If Options(CTRO_AUTO_CONNCLOSE) Then Disconnect
    If Options(CTRO_AUTO_CONNRELEASE) Then ReleaseConnection
    Exit Sub
errHandler:
    ErrorIn "CNorthwindDB.Execute(CommandText,CommandType)", Array(CommandText, CommandType), , mConnection
End Sub

'
'Multiple recordsets
'Returns true if next recordset exists and was made current.
Public Function SelectNextRecordset() As Boolean
    On Error GoTo errHandler
    If mRecordset Is Nothing Then Exit Function ' returning false, not avail for unconnected recordsets
    If mRecordset.ActiveConnection Is Nothing Then Exit Function
    Set mRecordset = Recordset.NextRecordset
    If Options(CTRO_AUTO_SKIPCLOSED) Then SkipClosedRecordsets
    SelectNextRecordset = Not (mRecordset Is Nothing)
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.SelectNextRecordset", , EA_PUBLIC, mConnection
    HandleError
End Function

Public Function SkipClosedRecordsets() As Boolean
    On Error GoTo errHandler
    If mRecordset Is Nothing Then Exit Function
    While (mRecordset.State = adStateClosed)
        Set mRecordset = mRecordset.NextRecordset
        If mRecordset Is Nothing Then Exit Function
    Wend
    SkipClosedRecordsets = Not (mRecordset Is Nothing)
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.SkipClosedRecordsets", , EA_PUBLIC, mConnection
    HandleError
End Function

'
' Parameters
Public Property Get ParamValue(ByVal ParamName As String) As Variant
    On Error GoTo errHandler
    ParamValue = PrmValue(ParamName)
    Exit Property
errHandler:
    ErrorIn "CNorthwindDB.ParamValue(ParamName)", ParamName, EA_PUBLIC
    HandleError
End Property

Public Function ParamIsNull(ByVal ParamName As String) As Boolean
    On Error GoTo errHandler
    ParamIsNull = IsNull(mCommand.Parameters(ParamName).Value)
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.ParamIsNull(ParamName)", ParamName, EA_PUBLIC
    HandleError
End Function

Public Property Get ReturnValue() As Long
    On Error GoTo errHandler
    ReturnValue = ParamValue(RETURN_VALUE)
    Exit Property
errHandler:
    ErrorIn "CNorthwindDB.ReturnValue", , EA_PUBLIC
    HandleError
End Property

Private Property Get PrmValue(ByVal ParamName As String) As Variant
    Dim P As ADODB.Parameter
    On Error GoTo errHandler
    Set P = mCommand.Parameters(ParamName)
    If Not IsNull(P.Value) Then PrmValue = P.Value
    Exit Property
errHandler:
    ErrorIn "CNorthwindDB.PrmValue(ParamName)", ParamName
End Property

Private Sub AddParam(ByVal PName As String, _
                     ByVal PType As ADODB.DataTypeEnum, _
                     ByVal PDir As ADODB.ParameterDirectionEnum, _
                     Optional ByVal PSize As Long, _
                     Optional ByVal PValue As Variant, _
                     Optional ByVal ZeroAsNull As Boolean = False)
    On Error GoTo errHandler
    If IsNull(PValue) Then
        'Nothing to do
    ElseIf IsEmpty(PValue) Or IsMissing(PValue) Then
        PValue = Null
    ElseIf ZeroAsNull Then
        If PValue = 0 Then PValue = Null
    Else
        Select Case PType
            Case adDate, adDBDate, adDBTime, adDBTimeStamp
                If PValue = 0 And Options(CTRO_NULL_ZERODATE) Then PValue = Null
            Case adChar, adWChar, adVarChar, adVarWChar, adLongVarChar, adLongVarWChar
                If PValue = "" And Options(CTRO_NULL_EMPTYSTR) Then
                    PValue = Null
                ElseIf Len(PValue) > PSize Then
                    If Options(CTRO_STRLEN_TRIM) Then
                        PValue = Left$(PValue, PSize)
                    ElseIf Options(CTRO_STRLEN_RAISE) Then
                        Check False, ERRCTR_STRING_TOO_LONG, _
                            "Size of Parameter " & PName & " exceedes max specified (" & PSize & ")"
                    End If 'Options(CTRO_STRLEN_TRIM) ...
                End If 'if PValue = "" ... elseif ...
        End Select 'Case PType
    End If
    With mCommand
        .Parameters.Append .CreateParameter(PName, PType, PDir, PSize, PValue)
    End With
    Exit Sub
errHandler:
    ErrorIn "CNorthwindDB.AddParam(PName,PType,PDir,PSize,PValue,ZeroAsNull)", _
         Array(PName, PType, PDir, PSize, PValue, ZeroAsNull)
End Sub

'
' Formatting Recordset Fields
'Returns formatted value of the field
Public Property Get ValueFmt(ByVal FieldName As String) As String
    Dim Fmt As String, F As ADODB.Field
    On Error GoTo errHandler
    Set F = mRecordset.Fields(FieldName)
    If IsNull(F.Value) Then Exit Property
    Fmt = FormatOf(FieldName)
    If Fmt = "" Then Fmt = FormatOf(F.Type)
    If Fmt = "" Then
        ValueFmt = F.Value
        Else
        ValueFmt = Format(F.Value, Fmt)
    End If
    Exit Property
errHandler:
    ErrorIn "CNorthwindDB.ValueFmt(FieldName)", FieldName, EA_PUBLIC
    HandleError
End Property

Public Property Get FormatOf(ByVal FieldOrType) As String
    On Error Resume Next
    Dim Key As String
    If IsNumeric(FieldOrType) Then
        Key = "ADO:" & FieldOrType
        Else
        Key = LCase$(Trim$(FieldOrType))
    End If
    FormatOf = mFormats(Key)
End Property

Public Sub FormatsClear()
    Set mFormats = Nothing
End Sub

'Examples:
'    FormatSet "MM/DD/YYYY", adDate, adDBDate
'    FormatSet "$#,##0.00", "OrderAmount", "Price"
'    Formatset "", adDate             '-- to remove dates formatting
Public Sub FormatSet(ByVal AFormat As String, ParamArray FieldsOrTypes())
    On Error GoTo errHandler
    Dim i As Long, Key As String
    If mFormats Is Nothing Then Set mFormats = New Collection
    For i = LBound(FieldsOrTypes) To UBound(FieldsOrTypes)
        If IsNumeric(FieldsOrTypes(i)) Then
            Key = "ADO:" & FieldsOrTypes(i)
            Else
            Key = LCase$(Trim$(FieldsOrTypes(i)))
        End If
        FormatRemove Key
        If AFormat <> "" Then mFormats.Add AFormat, Key
    Next i
    Exit Sub
errHandler:
    ErrorIn "CNorthwindDB.FormatSet(AFormat,arrFieldNames)", Array(AFormat, FieldsOrTypes), EA_PUBLIC
    HandleError
End Sub

Private Sub FormatRemove(ByVal Key As String)
    On Error Resume Next
    mFormats.Remove Key
End Sub

'
' Error Properties
Public Property Get ErrorNumber() As Long
    ErrorNumber = mErrorNumber
End Property

Public Property Get ErrorSource() As String
    ErrorSource = mErrorSource
End Property

Public Property Get ErrorDescription() As String
    ErrorDescription = mErrorDescription
End Property

Public Property Get ErrorOccured() As Boolean
    ErrorOccured = (mErrorNumber <> 0)
End Property

Public Sub ErrorClear()
    mErrorNumber = 0
    mErrorSource = ""
    mErrorDescription = ""
End Sub

Private Sub Class_Initialize()
    If mOptions = 0 Then Initialize
End Sub

Private Sub Class_Terminate()
    ReleaseADO
End Sub

'
' Transactions
Public Function BeginTransaction() As Boolean
    On Error GoTo errHandler
    OpenConnection
    Options(CTRO_IN_ADOTRANS) = True
    mConnection.BeginTrans
    BeginTransaction = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.BeginTransaction", , EA_PUBLIC, mConnection
    HandleError
End Function

Public Function SetComplete() As Boolean
    On Error GoTo errHandler
    If Options(CTRO_IN_ADOTRANS) Then
        mConnection.CommitTrans
        Options(CTRO_IN_ADOTRANS) = False
    End If
    SetComplete = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.SetComplete", , EA_PUBLIC, mConnection
    HandleError
End Function

Public Function SetAbort() As Boolean
    On Error GoTo errHandler
    If Options(CTRO_IN_ADOTRANS) Then
        mConnection.RollbackTrans
        Options(CTRO_IN_ADOTRANS) = False
    End If
    SetAbort = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.SetAbort", , EA_PUBLIC, mConnection
    HandleError
End Function

'
' Recordset Navigation
Public Function MoveFirst() As Boolean
    On Error GoTo errHandler
    mRecordset.MoveFirst
    MoveFirst = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.MoveFirst", , EA_PUBLIC
    HandleError
End Function

Public Function MoveLast() As Boolean
    On Error GoTo errHandler
    mRecordset.MoveLast
    MoveLast = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.MoveLast", , EA_PUBLIC
    HandleError
End Function

Public Function MoveNext() As Boolean
    On Error GoTo errHandler
    mRecordset.MoveNext
    MoveNext = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.MoveNext", , EA_PUBLIC
    HandleError
End Function

Public Function MovePrevious() As Boolean
    On Error GoTo errHandler
    mRecordset.MovePrevious
    MovePrevious = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.MovePrevious", , EA_PUBLIC
    HandleError
End Function

Public Property Get EOF() As Boolean
    On Error GoTo errHandler
    EOF = mRecordset.EOF
    Exit Property
errHandler:
    ErrorIn "CNorthwindDB.EOF", , EA_PUBLIC
    HandleError
End Property

Public Property Get BOF() As Boolean
    On Error GoTo errHandler
    BOF = mRecordset.BOF
    Exit Property
errHandler:
    ErrorIn "CNorthwindDB.BOF", , EA_PUBLIC
    HandleError
End Property

Public Property Get HasRecords() As Boolean
    On Error Resume Next
    HasRecords = Not (mRecordset.EOF And mRecordset.BOF)
End Property

Public Property Get RecordCount() As Long
    On Error GoTo errHandler
    RecordCount = mRecordset.RecordCount
    Exit Property
errHandler:
    ErrorIn "CNorthwindDB.RecordCount", , EA_PUBLIC
    HandleError
End Property

'
'Batch methods
Public Function BatchBegin() As Boolean
    On Error GoTo errHandler
    Options(CTRO_IN_BATCH) = True
    mBatchDecls = ""
    mBatchText = ""
    Set mBatchVars = New Collection
    BatchBegin = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.BatchBegin", , EA_PUBLIC
    HandleError
End Function

'Executes batch
Public Function BatchExec() As Boolean
    On Error GoTo errHandler
    Check BatchActive, ERRCTR_BATCH_NOT_ACTIVE, "Batch mode is not ON"
    OpenConnection
    Options(CTRO_IN_BATCH) = False
    InitCommand
    Execute BatchText, adCmdText
    Set mBatchVars = Nothing
    BatchExec = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.BatchExec", , EA_PUBLIC
    HandleError
End Function

Public Function BatchCancel() As Boolean
    Options(CTRO_IN_BATCH) = False
    Set mBatchVars = Nothing
    mBatchDecls = ""
    mBatchText = ""
    BatchCancel = True
End Function

'Adds declaration of a variable to the batch. If Value is specified
' assigns initial value as well
' If UseForParams is not specified or empty, then uses variable's name for
' matching to parameters' names.
Public Function BatchDeclareVar(ByVal VarName As String, _
                        ByVal VarType As String, _
                        Optional ByVal UseForParams As String, _
                        Optional ByVal InitialValue As String) As Boolean
    On Error GoTo errHandler
    Dim arrParams() As String, i As Long
    Check BatchActive, ERRCTR_BATCH_NOT_ACTIVE, "Batch mode is not active"
    mBatchDecls = mBatchDecls & "Declare " & VarName & " " & VarType & ";" & vbNewLine
    If InitialValue <> "" Then mBatchDecls = mBatchDecls & "SET " & VarName & " = " & _
        InitialValue & ";" & vbNewLine
    If UseForParams = "" Then
        mBatchVars.Add VarName, LCase$(VarName)
        Else
        arrParams = Split(UseForParams, ",")
        For i = LBound(arrParams) To UBound(arrParams)
            Check BatchVarNameForParamName(arrParams(i)) = "", ERRCTR_BATCH_PRMDUPLICATE, _
                "Parameter " & arrParams(i) & " is already assigned for substitue by another batch variable."
            mBatchVars.Add VarName, LCase$(arrParams(i))
        Next i
    End If 'UseForParams
    BatchDeclareVar = True
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.BatchDeclareVar(VarName,VarType,UseForParams,InitialValue)", Array(VarName, _
         VarType, UseForParams, InitialValue), EA_PUBLIC
    HandleError
End Function

Public Property Get BatchActive() As Boolean
    BatchActive = Options(CTRO_IN_BATCH)
End Property

Public Property Get BatchText() As String
    BatchText = mBatchDecls & mBatchText
End Property

Private Sub BatchTranslateCommand(Optional ByVal CommandText As String, _
                    Optional ByVal CommandType As ADODB.CommandTypeEnum = adCmdStoredProc)
    On Error GoTo errHandler
    Dim P As ADODB.Parameter, strParam As String, i As Long, Count As Long, strPrmList As String
    If CommandType = adCmdText Then
        mBatchText = mBatchText & CommandText & ";" & vbNewLine
        Else
        Count = mCommand.Parameters.Count
        If Count > 1 Then
            For i = 1 To Count - 1 '0 is Return Value parameter, we skip it
                If strPrmList = "" Then strPrmList = " " Else strPrmList = strPrmList & ", "
                Set P = mCommand.Parameters(i)
                If strParam = "" Then BatchVarNameForParamName (CommandText & ":" & P.Name)
                strParam = BatchVarNameForParamName(P.Name)
                If strParam = "" Then
                    strParam = BatchParamValueAsString(P)
                    Else
                    If P.Direction = adParamInputOutput Or P.Direction = adParamOutput Then _
                            strParam = strParam & " OUTPUT"
                End If
                strPrmList = strPrmList & strParam
            Next i
        End If 'Count ...
        mBatchText = mBatchText & "EXEC " & CommandText & strPrmList & ";" & vbNewLine
    End If 'CommandType...
    Exit Sub
errHandler:
    ErrorIn "CNorthwindDB.BatchTranslateCommand(CommandText,CommandType)", Array(CommandText, CommandType)
End Sub

Private Function BatchVarNameForParamName(ByVal ParamName As String) As String
  On Error Resume Next
  BatchVarNameForParamName = mBatchVars(LCase$(ParamName))
End Function

Private Function BatchParamValueAsString(ByVal P As ADODB.Parameter) As String
    On Error GoTo errHandler
    Dim PName As String
    PName = P.Name
    If P.Direction = adParamOutput Or IsNull(P.Value) Then
        BatchParamValueAsString = "Null"
    Else
        Select Case P.Type
            Case adBigInt, adUnsignedBigInt, adUnsignedInt, adUnsignedSmallInt, _
                adInteger, adSmallInt, adTinyInt, adUnsignedTinyInt, _
                adDouble, adSingle, adDecimal, adNumeric, adCurrency
                    BatchParamValueAsString = P.Value
            Case adBSTR, adChar, adLongVarChar, adLongVarWChar, adVarChar, adVarWChar, adWChar
                    BatchParamValueAsString = "'" & Replace(P.Value, "'", "''") & "'"
            Case adBoolean
                    BatchParamValueAsString = IIf(P.Value, "1", "0")
            Case adDBTimeStamp, adDate, adDBDate, adDBTime
                    BatchParamValueAsString = "'" & CDate(P.Value) & "'"
            Case adGUID
                    BatchParamValueAsString = "'" & P.Value & "'"
            Case Else
                Check False, ERRCTR_TYPE_NOT_SUPPORTED, "Parameter type is not supported in batch mode. "
        End Select
    End If 'IsNull(....
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.BatchParamValueAsString(P)", P, , , "ParamName", PName
End Function

'
' XML
Public Function xmlGetRecordset() As String
    On Error GoTo errHandler
    xmlGetRecordset = xmlSaveRecordset(mRecordset)
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.xmlGetRecordset", , EA_PUBLIC
    HandleError
End Function

Public Function xmlGetData(Optional ByVal RsDataElem As String = "Recordset", _
                            Optional ByVal ZRowElem As String = "Record", _
                            Optional ByVal ClosingTag As String) As String
    On Error GoTo errHandler
    Dim xml As String
    xml = xmlExtractRecords(mRecordset, ZRowElem)
    xmlGetData = xmlEnclose(xml, RsDataElem, ClosingTag)
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.xmlGetData(RsDataElem,ZRowElem,ClosingTag)", Array(RsDataElem, ZRowElem, _
         ClosingTag), EA_PUBLIC
    HandleError
End Function

'Returns all recordsets in one XML message
'Examples:
'xml = xmlGetAllData("CustomersAndOrders", "Customers,Orders", "Customer,Order") --
' Using tags instead of element names:
'xml = xmlGetAllData("<CustOrders A='V'>", ",Orders", "Customer,Order", "</CustOrders>")
' (Customer element will be direct child of CustOrders)
Public Function xmlGetDataAll(Optional ByVal RootElem As String = "Data", _
                              Optional ByVal RsDataElems As String = "Recordset", _
                              Optional ByVal ZRowElems As String = "Record", _
                              Optional ByVal ClosingTag As String) As String
    On Error GoTo errHandler
    Dim arrRsDataElems() As String, arrZRowElems() As String, Cnt As Long, xmlRecs As String, xmlRes As String
    Dim RsDataElem As String, ZRowElem As String
    arrRsDataElems = Split(RsDataElems, ",")
    arrZRowElems = Split(ZRowElems, ",")
    Cnt = 0
    Do
        SkipClosedRecordsets
        If Cnt <= UBound(arrRsDataElems) Then RsDataElem = arrRsDataElems(Cnt)
        If Cnt <= UBound(arrZRowElems) Then ZRowElem = arrZRowElems(Cnt)
        xmlRecs = xmlExtractRecords(mRecordset, ZRowElem)
        xmlRecs = xmlEnclose(xmlRecs, RsDataElem)
        xmlRes = xmlRes & xmlRecs
        Cnt = Cnt + 1
    Loop While SelectNextRecordset
    xmlGetDataAll = xmlEnclose(xmlRes, RootElem, ClosingTag)
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.xmlGetDataAll(RootElem,RsDataElems,ZRowElems,ClosingTag)", Array(RootElem, _
         RsDataElems, ZRowElems, ClosingTag), EA_PUBLIC
    HandleError
End Function

'Advanced Recordset --> XML Transformations ======================================================
Public Function xmlGetDataAdv(ByVal RsDataElem As String, _
                            ByVal ZRowSpecs As String, _
                            Optional ByVal SkipRecords As Long = 0, _
                            Optional ByVal IncludeMaxRecords As Long = -1, _
                            Optional ByVal ClosingTag As String) As String
    On Error GoTo errHandler
    Dim i As Long, arrSpecs() As String, Spec As String, colStack As Collection ', RecCount As Long
    Dim CurrElem As String, strElem As String, blnIsAttr As Boolean
    Dim xml As String, strElAttrs As String, strElCont As String, StartPosition As Long
    Dim NodeName As String, FieldName As String, NodeValue, arrNdFld() As String
    ZRowSpecs = Replace(ZRowSpecs, " ", "")      'Remove spaces
    ZRowSpecs = Replace(ZRowSpecs, "(", "(,")    'Just needed by algorithm to work
    ZRowSpecs = Replace(ZRowSpecs, ")", ",)")    '"(" and ")" are control chars that start/end nested element
    arrSpecs = Split(ZRowSpecs, ",")
    Set colStack = New Collection
    With mRecordset
        If SkipRecords > 0 Then .AbsolutePosition = .AbsolutePosition + SkipRecords
        StartPosition = .AbsolutePosition
        While Not (.EOF Or .AbsolutePosition = SkipRecords + IncludeMaxRecords + 1)
            strElCont = ""
            strElAttrs = ""
            For i = 0 To UBound(arrSpecs)
                Spec = arrSpecs(i)
                If Right(Spec, 1) = "(" Then             'Create element in stack
                    CurrElem = Replace(Spec, "(", "")  'Cut off this parenthesis
                    colStack.Add strElAttrs   'Push attrs, element content and new current element
                    colStack.Add strElCont
                    colStack.Add CurrElem
                    strElCont = ""
                    strElAttrs = ""
                ElseIf Spec = ")" Then  'pop elem, finalize it, and attach to elements at prev level
                    CurrElem = colStack(colStack.Count) 'Pop current element
                    colStack.Remove colStack.Count
                    strElem = xmlMakeElement(CurrElem, strElAttrs, strElCont)
                    strElCont = colStack(colStack.Count) & strElem '... and attach it to prev level elements
                    colStack.Remove colStack.Count
                    strElAttrs = colStack(colStack.Count) 'Pop attributes list
                    colStack.Remove (colStack.Count)
                Else
                    arrNdFld = Split(Spec, "=") 'separate node and field name in expr "NodeName=FldName"
                    NodeName = arrNdFld(0)
                    blnIsAttr = (Left(NodeName, 1) = "@") 'Detect whether it will be attr or sub-element
                    If blnIsAttr Then NodeName = Mid$(NodeName, 2) 'cut-off @
                    'if there was no "=", then field is the same as node
                    If UBound(arrNdFld) = 0 Then FieldName = NodeName Else FieldName = arrNdFld(1)
                    If FieldName = "#" Then
                        NodeValue = .AbsolutePosition
                    ElseIf FieldName = "##" Then
                        NodeValue = .AbsolutePosition - StartPosition + 1
                    ElseIf InStr(1, FieldName, "'") Then
                        NodeValue = Replace(FieldName, "'", "")
                    Else
                        NodeValue = ValueFmt(FieldName)
                    End If
                    If Not (IsEmpty(NodeValue) Or IsNull(NodeValue)) Then
                        If blnIsAttr Then
                            strElAttrs = strElAttrs & xmlMakeAttr(NodeName, NodeValue)
                            Else
                            strElCont = strElCont & xmlMakeElement(NodeName, "", XMLEscape(NodeValue))
                        End If
                    End If 'Not
                End If 'Right(Spec,...
            Next i
            Check colStack.Count = 0, ERRCTR_INVALID_NODESPEC, "Invalid node specification: Missing closing ')'"
            xml = xml & strElCont 'The whole record is in subelement now
            .MoveNext
        Wend
    End With
    xmlGetDataAdv = xmlEnclose(xml, RsDataElem, ClosingTag)
    Exit Function
errHandler:
    ErrorIn "CNorthwindDB.xmlGetDataAdv(RsDataElem,ZRowSpecs,SkipRecords,IncludeMaxRecords,ClosingTag)", _
         Array(RsDataElem, ZRowSpecs, SkipRecords, IncludeMaxRecords, ClosingTag), EA_PUBLIC
    HandleError
End Function

Private Sub Initialize()
    On Error GoTo errHandler
    mOptions = DEFAULT_OPTIONS Or CTRO_INITIALIZED
    mCursorLocation = adUseClient
    mCursorType = adOpenForwardOnly
    mLockType = adLockReadOnly
    mConnectionTimeout = 15
    mCommandTimeout = 60
    mADOExecOptions = DEFAULT_ADOEXEC_OPTIONS
    Exit Sub
errHandler:
    ErrorIn "CNorthwindDB.Initialize"
End Sub

Private Sub HandleError()
    mErrorNumber = Err.Number
    mErrorSource = Err.Source
    mErrorDescription = Err.Description
    On Error Resume Next
    'Disable/rollback transactions, log error here
    If Options(CTRO_ERR_SETABORT) Then SetAbort
    ErrSaveToFile "Errors.txt"
    On Error GoTo 0
    If Options(CTRO_ERR_RAISE) Then Err.Raise mErrorNumber, mErrorSource, mErrorDescription
End Sub
